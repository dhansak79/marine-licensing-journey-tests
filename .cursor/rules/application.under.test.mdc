---
description: This rule provides essential context about the marine licensing application architecture, domain terminology, and actual routes/features. Use this when you need to understand the real application structure, create domain-specific tests, or ensure test scenarios reflect actual user journeys for marine licensing workflows.
globs: 
alwaysApply: false
---
# Marine Licensing Application Under Test Context

## Application Architecture
- **Frontend**: Hapi.js server-side rendered application using Nunjucks templates and GOV.UK Design System
- **Backend**: Hapi.js REST API with MongoDB for data persistence  
- **Stack**: Node.js ES modules, no TypeScript (JavaScript only)
- **Testing**: Jest for unit tests, WebDriverIO with Screenplay pattern for E2E tests

## Domain Context
This is a UK Government (Defra) marine licensing application managed by the Marine Management Organisation (MMO) that handles:

### Core Marine Licensing Activities
- **Marine licence applications** - For activities in English marine areas
- **Public register** - Searchable database of marine licence applications and decisions
- **Exemption notifications** - For activities that qualify for exemptions from full licensing
- **Project management** - Registration and tracking of marine projects

### Types of Marine Activities Covered
- **Offshore energy generation** - Wind farms, tidal, wave and other renewable energy projects
- **Cable and pipeline laying** - Subsea cables, pipelines and associated infrastructure
- **Dredging operations** - Including accelerated licensing pathways for routine dredging
- **Marine construction** - Ports, harbours, coastal defence and marine infrastructure
- **Seismic and geophysical surveys** - Marine surveys and investigations
- **Material disposal** - Dredged material disposal at designated sites
- **Marine wildlife activities** - Activities requiring marine wildlife licences

### Regulatory Framework
- **Marine and Coastal Access Act 2009** - Primary legislation governing marine licensing
- **Nationally Significant Infrastructure Projects (NSIP)** - Major infrastructure requiring special consideration
- **Environmental assessments** - Including sediment sampling and environmental impact assessments
- **Compliance and enforcement** - Monitoring and enforcement of marine licence conditions
- **Fee structure** - Standardised fees for different types of applications and activities

### User Types and Journeys
For detailed user personas including needs, pain points, and test implications, see `personas.mdc`.

**Key user categories:**
- **Internal MMO staff** - Case officers (enquiry support) and marine officers (enforcement)
- **External applicants** - Veteran users (efficiency focus) and novice users (guidance needs)
- **Cross-cutting considerations** - Digital divide, location data complexity, process uncertainty

## Application Under Test Structure

### Frontend (../marine-licensing-frontend/)
- `/src/server/` - Hapi.js routes and handlers organised by feature
- `/src/server/exemption/` - Exemption notification journey
- `/src/server/home/` - Landing and dashboard pages  
- `/src/server/common/` - Shared components and utilities
- `/src/client/` - Frontend assets and JavaScript
- Uses Nunjucks templates with GOV.UK Design System components

### Backend (../marine-licensing-backend/)  
- `/src/routes/` - REST API endpoints
- `/src/models/` - Data models and MongoDB schemas
- `/src/api/` - External API integrations
- `/src/plugins/` - Hapi.js plugins for cross-cutting concerns
- Models include: exemption, project-name, public-register, shared-models

## Test Development Guidelines
When helping with test development:

1. **Reference actual routes and endpoints** - Check the frontend routes in `../marine-licensing-frontend/src/server/` and backend routes in `../marine-licensing-backend/src/routes/` to understand the actual application structure

2. **Use domain language** - Refer to marine licensing concepts like exemptions, licences, project names, public register rather than generic terms

3. **Follow application patterns** - Both frontend and backend use Hapi.js patterns, so understand route handlers, request/response cycles, and validation schemas

4. **Check actual page structures** - When creating page objects or interactions, reference the actual Nunjucks templates and frontend components

5. **Understand user journeys** - The application has specific marine licensing workflows that should be reflected in test scenarios. Reference the personas in `personas.mdc` for realistic user behaviour patterns

6. **API integration awareness** - Tests may need to interact with external marine licensing APIs and data sources

## Key Features to Test
- **Marine licence application journeys** - Full application processes for different activity types
- **Exemption notification workflows** - Simplified process for activities qualifying for exemptions
- **Public register functionality** - Search, filter and display of marine licence applications and decisions
- **Project management flows** - Project registration, naming, and progress tracking
- **Application timeline tracking** - Status updates and progress monitoring through the licensing process
- **Fee calculation and payment** - Dynamic fee calculation based on activity type and complexity
- **Document upload and management** - Supporting documentation and evidence submission
- **User authentication and session management** - Secure access for different user types
- **Data persistence and retrieval** - MongoDB integration for application data
- **Integration with external systems** - MMO systems, payment gateways, and regulatory databases

## Environment Configuration
- Frontend runs on port 3000 (configurable via environment)
- Backend API runs on port 3001 (configurable via environment)  
- MongoDB and Redis dependencies for data and session storage
- Docker Compose setup available for local development and testing

When suggesting test scenarios, page objects, or interactions, always consider the actual application functionality and user needs for marine licensing workflows.
