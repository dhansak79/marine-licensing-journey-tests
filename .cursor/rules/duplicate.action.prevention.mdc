---
description:
globs:
alwaysApply: false
---
# Duplicate Action Prevention

*Lessons learned from fixing duplicate action bugs in test automation*

## Context
This rule addresses the problem of duplicate actions in test automation, particularly when tasks already handle certain actions internally but additional actions are added manually.

## The Problem We Found

### Duplicate Save Actions
```javascript
// BAD: CompletePublicRegisterTask.andSaving() already clicks save
await this.actor.attemptsTo(CompletePublicRegisterTask.andSaving())
await this.actor.attemptsTo(ClickSaveAndContinue.now()) // DUPLICATE!
```

This causes:
- Potential test failures from double-clicking
- Unpredictable timing issues
- Confusion about what action actually triggered the result

## Core Principles

### 1. Understand Task Responsibilities
Before adding manual actions, check what the task already does:

```javascript
// CompletePublicRegisterTask.andSaving() already:
// 1. Fills in the form
// 2. Clicks save and continue
// 3. Updates the exemption state

// So this is all you need:
await this.actor.attemptsTo(CompletePublicRegisterTask.andSaving())
```

### 2. Use Task Variants Appropriately
```javascript
// Good: Use the right task variant for your needs
await this.actor.attemptsTo(CompletePublicRegisterTask.andSaving())    // Saves
await this.actor.attemptsTo(CompletePublicRegisterTask.andNotSaving()) // Doesn't save
```

### 3. Avoid Manual Actions After Complete Tasks
```javascript
// BAD: Manual action after complete task
await this.actor.attemptsTo(CompleteProjectNameTask.andSaving())
await this.actor.attemptsTo(ClickSaveAndContinue.now()) // Already done!

// GOOD: Trust the task to handle everything
await this.actor.attemptsTo(CompleteProjectNameTask.andSaving())
```

## Common Duplicate Action Patterns

### 1. Save Button Duplicates
```javascript
// BAD
await this.actor.attemptsTo(CompleteTask.andSaving())
await this.actor.attemptsTo(ClickSaveAndContinue.now())

// GOOD
await this.actor.attemptsTo(CompleteTask.andSaving())
```

### 2. Navigation Duplicates
```javascript
// BAD
await this.actor.attemptsTo(CompleteTask.andNavigateToNext())
await this.actor.attemptsTo(NavigateToTaskList.now())

// GOOD
await this.actor.attemptsTo(CompleteTask.andNavigateToNext())
```

### 3. State Update Duplicates
```javascript
// BAD
await this.actor.attemptsTo(CompleteTask.andUpdateState())
this.actor.updates('exemption', (exemption) => exemption.markCompleted())

// GOOD
await this.actor.attemptsTo(CompleteTask.andUpdateState())
```

## How to Prevent Duplicates

### 1. Read Task Implementation
Before using a task, understand what it does:
```javascript
// Check what CompletePublicRegisterTask.andSaving() actually does
static andSaving() {
  return new CompletePublicRegisterTask(true) // saveAndContinue = true
}

async performAs(actor) {
  // ... fill form ...
  if (this.saveAndContinue) {
    await browseTheWeb.click(PublicRegisterPage.saveAndContinue) // Already saves!
    actor.updates('exemption', (exemption) => exemption.markCompleted())
  }
}
```

### 2. Use Task Naming Conventions
Task names should clearly indicate what they do:
- `.andSaving()` - completes the task AND saves
- `.andNotSaving()` - completes the task but doesn't save
- `.withNavigation()` - includes navigation
- `.withoutNavigation()` - no navigation

### 3. Check Step Definitions for Existing Actions
```javascript
// Before adding new actions, check what's already there
When('the Save and continue button is selected after choosing Yes', async function () {
  // This already handles the save action
  await this.actor.attemptsTo(CompletePublicRegisterTask.andSaving())
  // Don't add: await this.actor.attemptsTo(ClickSaveAndContinue.now())
})
```

## Testing for Duplicates

### 1. Look for Double Actions in Logs
```
INFO webdriver: COMMAND elementClick("save-button")
INFO webdriver: COMMAND elementClick("save-button") // DUPLICATE!
```

### 2. Check for Timing Issues
- Tests that sometimes pass/fail
- Unexpected navigation
- State updates that don't stick

### 3. Review Step Definitions
Look for patterns like:
```javascript
await this.actor.attemptsTo(SomeTask.andSaving())
await this.actor.attemptsTo(ClickSave.now()) // Suspicious!
```

## Best Practices

### 1. Single Responsibility for Actions
Each action should have one clear purpose:
```javascript
// GOOD: Clear, single purpose
await this.actor.attemptsTo(FillPublicRegisterForm.with(data))
await this.actor.attemptsTo(ClickSaveAndContinue.now())

// BETTER: Combined into one task
await this.actor.attemptsTo(CompletePublicRegisterTask.andSaving())
```

### 2. Task Composition Over Action Chains
```javascript
// BAD: Long chains of individual actions
await this.actor.attemptsTo(FillForm.with(data))
await this.actor.attemptsTo(ValidateForm.now())
await this.actor.attemptsTo(ClickSave.now())
await this.actor.attemptsTo(UpdateState.now())

// GOOD: Composed task
await this.actor.attemptsTo(CompleteFormTask.with(data))
```

### 3. Clear Task Documentation
```javascript
/**
 * Completes the public register task by:
 * 1. Filling the form with provided data
 * 2. Clicking save and continue (if andSaving)
 * 3. Updating exemption state
 */
static andSaving() {
  return new CompletePublicRegisterTask(true)
}
```

## Red Flags to Watch For

1. **Multiple save actions** in the same step
2. **Tasks with unclear names** that might hide functionality
3. **Manual actions after "complete" tasks**
4. **Inconsistent test results** that might indicate timing issues
5. **WebDriver logs showing duplicate clicks**

## Remember
> "If a task says it's complete, trust it to be complete. Don't add manual actions 'just to be sure'." - Quality Engineering Lesson

The goal is clear, predictable actions where each step has a single, well-defined responsibility.
