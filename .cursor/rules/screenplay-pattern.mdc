---
description: 
globs: 
alwaysApply: true
---
---
description: Rules and structure for the Screenplay pattern implementation
globs: test-infrastructure/screenplay/**/*.js
alwaysApply: true
---
# Screenplay Pattern Standards

This project implements the Screenplay pattern for end-to-end testing, which is a user-centric approach to UI automation that focuses on who does what and why.

## Core Components

- `actor.js` - Represents the user performing actions in the test
  - Uses abilities to interact with the system (for example interacting with a web app using wdio or calling an api using an http client)
  - Can remember and recall information using memory
  - Performs tasks and interactions

- `abilities/` - What the actor can do
  - `ability.js` - Base class for all abilities
  - `browse.the.web.js` - Ability to interact with web pages - this should completely encapsulate wdio code

- `tasks/` - High-level user activities
  - `task.js` - Base class for all tasks
  - Tasks should represent user goals (e.g., `navigate.js`, `complete.project.name.js`)
  - Tasks may be composed of multiple interactions

- `interactions/` - Low-level actions the actor performs
  - Simple, focused actions (e.g., `click.save.and.continue.js`, `ensure.heading.js`)
  - Typically interact with a single element or perform a specific assertion

## Implementation Rules

1. All new screenplay components should follow the established naming pattern using dot.case
2. Tasks should be high-level and represent user goals, not technical actions
3. Interactions should be small and focused on a single action
4. Actor should be the primary entry point for all test actions
5. Page objects should only contain locators, not actions
6. In any test-infrastucture code do not `throw Error`. Always use a `chai` assertion instead to allow the tests to complete.

## Structure and Patterns

### Actor
```javascript
// Instantiate actor
const actor = new Actor('User')
actor.can(new BrowseTheWeb(browser))

// Perform tasks
await actor.attemptsTo(
  Navigate.toProjectNamePage(),
  CompleteProjectName.with('My Project'),
  EnsureHeading.is('Task List')
)

// Remember and recall information
actor.remembers('projectName', 'My Project')
const name = actor.recalls('projectName')
```

### Abilities
```javascript
// Extend the base Ability class
export default class BrowseTheWeb extends Ability {
  constructor(browser) {
    super()
    this.browser = browser
  }
  
  // Implement specific abilities
  async navigateTo(url) {
    await this.browser.url(url)
  }
}
```

### Tasks
```javascript
// Extend the base Task class
export default class Navigate extends Task {
  static toProjectNamePage() {
    return new Navigate().startAt(ProjectNamePage.url)
  }
  
  async performAs(actor) {
    await actor.ability.navigateTo(this.startUrl)
  }
}
```

### Interactions
```javascript
// Extend the base Task class (interactions are also tasks)
export default class EnsureHeading extends Task {
  static is(expectation) {
    return new EnsureHeading(expectation)
  }
  
  async performAs(actor) {
    await actor.ability.expectElementToContainText('h1', this.expectation)
  }
}
```
