{
  "rules": [
    {
      "name": "marine-licensing-journey-tests/application.under.test",
      "description": "when needing context about the marine licensing application, understanding domain terminology, referencing actual application features, or creating domain-specific tests",
      "glob": ".cursor/rules/application.under.test.mdc",
      "category": "domain-knowledge",
      "priority": "high",
      "tags": [
        "marine-licensing",
        "domain-context",
        "terminology",
        "application-features"
      ],
      "summary": "Provides essential context about the marine licensing application, including key terminology, domain concepts, and feature descriptions to ensure tests reflect real-world usage.",
      "summary_file": ".cursor/rules/summaries/application.under.test.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/bdd.rules",
      "description": "when writing feature files, creating Gherkin scenarios, implementing BDD practices, or ensuring clear acceptance criteria and test scenarios",
      "glob": ".cursor/rules/bdd.rules.mdc",
      "category": "testing-methodology",
      "priority": "medium",
      "tags": [
        "bdd",
        "gherkin",
        "scenarios",
        "feature-files",
        "acceptance-criteria"
      ],
      "summary": "Guidelines for writing effective BDD feature files and Gherkin scenarios that align with acceptance criteria and capture clear test scenarios.",
      "summary_file": ".cursor/rules/summaries/bdd.rules.summary.md",
      "complexity": "low"
    },
    {
      "name": "marine-licensing-journey-tests/code.generation",
      "description": "when writing any code, implementing test automation, creating new files, following coding standards, or working with JavaScript and testing frameworks",
      "glob": ".cursor/rules/code.generation.mdc",
      "category": "development",
      "priority": "high",
      "tags": [
        "javascript",
        "coding-standards",
        "test-automation",
        "frameworks"
      ],
      "summary": "Standards for writing maintainable JavaScript test automation code, including patterns, practices, and framework-specific guidance.",
      "summary_file": ".cursor/rules/summaries/code.generation.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/dangerous.url.commands",
      "description": "when using search-and-replace tools on documentation, running commands that might affect URLs, or performing bulk documentation updates",
      "glob": ".cursor/rules/dangerous.url.commands.mdc",
      "category": "documentation",
      "priority": "medium",
      "tags": [
        "urls",
        "search-replace",
        "documentation-updates",
        "risk-mitigation"
      ],
      "summary": "Warnings and guidelines for commands that could accidentally break URLs in documentation, with safe alternatives for common operations.",
      "summary_file": ".cursor/rules/summaries/dangerous.url.commands.summary.md",
      "complexity": "low"
    },
    {
      "name": "marine-licensing-journey-tests/documentation.coherence",
      "description": "when creating or updating documentation, ensuring cross-reference integrity, maintaining documentation quality, or managing complex documentation structures",
      "glob": ".cursor/rules/documentation.coherence.mdc",
      "category": "documentation",
      "priority": "high",
      "tags": ["documentation", "cross-references", "quality", "structure"],
      "summary": "Principles for maintaining coherent documentation with consistent terminology, proper cross-references, and logical structure.",
      "summary_file": ".cursor/rules/summaries/documentation.coherence.summary.md",
      "complexity": "high"
    },
    {
      "name": "marine-licensing-journey-tests/documentation.progressive-disclosure",
      "description": "when structuring complex documentation, improving readability, organizing information hierarchically, or making documentation more accessible and usable",
      "glob": ".cursor/rules/documentation.progressive-disclosure.mdc",
      "category": "documentation",
      "priority": "medium",
      "tags": [
        "readability",
        "hierarchy",
        "accessibility",
        "information-architecture"
      ],
      "summary": "Methods for organizing complex information using progressive disclosure principles to improve readability and comprehension.",
      "summary_file": ".cursor/rules/summaries/documentation.progressive-disclosure.summary.md",
      "complexity": "high"
    },
    {
      "name": "marine-licensing-journey-tests/htsm",
      "description": "when applying systematic testing techniques, using heuristic models for test discovery, planning comprehensive test coverage, or conducting risk-based testing",
      "glob": ".cursor/rules/htsm.mdc",
      "category": "testing-methodology",
      "priority": "medium",
      "tags": ["heuristic", "test-discovery", "risk-based", "test-coverage"],
      "summary": "Implementation of the Heuristic Test Strategy Model for systematic test planning, discovery, and risk-based coverage analysis.",
      "summary_file": ".cursor/rules/summaries/htsm.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/import.dependency.management",
      "description": "when refactoring code that involves imports, managing dependencies, restructuring modules, or troubleshooting import-related issues",
      "glob": ".cursor/rules/import.dependency.management.mdc",
      "category": "development",
      "priority": "medium",
      "tags": ["imports", "dependencies", "modules", "refactoring"],
      "summary": "Best practices for managing import dependencies during code refactoring, with focus on maintaining module integrity and preventing circular dependencies.",
      "summary_file": ".cursor/rules/summaries/import.dependency.management.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/personas",
      "description": "when designing user-focused tests, creating realistic test scenarios, understanding user needs and constraints, or planning persona-driven testing approaches",
      "glob": ".cursor/rules/personas.mdc",
      "category": "user-experience",
      "priority": "high",
      "tags": ["personas", "user-needs", "scenarios", "user-testing"],
      "summary": "References established personas from the documentation directory to ensure consistent user representation across testing activities.",
      "summary_file": ".cursor/rules/summaries/personas.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/playbook.clean.code",
      "description": "when reviewing code quality, refactoring existing code, identifying code smells, maintaining clean code standards, or conducting code reviews",
      "glob": ".cursor/rules/playbook.clean.code.mdc",
      "category": "development",
      "priority": "high",
      "tags": ["code-quality", "refactoring", "code-smells", "clean-code"],
      "summary": "Guidelines for maintaining clean, readable, and maintainable code, including identification and remediation of common code smells.",
      "summary_file": ".cursor/rules/summaries/playbook.clean.code.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/playbook.general.rules",
      "description": "when making any code or documentation changes, following general development practices, ensuring quality standards, or applying systematic thinking approaches",
      "glob": ".cursor/rules/playbook.general.rules.mdc",
      "category": "general",
      "priority": "high",
      "tags": [
        "development-practices",
        "quality-standards",
        "systematic-thinking"
      ],
      "summary": "Core principles and practices that apply to all development and documentation work, establishing baseline quality standards.",
      "summary_file": ".cursor/rules/summaries/playbook.general.rules.summary.md",
      "complexity": "low"
    },
    {
      "name": "marine-licensing-journey-tests/playbook.refactoring",
      "description": "when refactoring code, restructuring existing implementations, improving code quality, or making safe code changes",
      "glob": ".cursor/rules/playbook.refactoring.mdc",
      "category": "development",
      "priority": "high",
      "tags": ["refactoring", "code-improvement", "safe-changes"],
      "summary": "Methodologies for safe, incremental code refactoring that improves structure while maintaining functionality and reducing risk.",
      "summary_file": ".cursor/rules/summaries/playbook.refactoring.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/playbook.styleguide",
      "description": "when writing documentation, following British English standards, maintaining professional tone, or ensuring GOV.UK content design compliance",
      "glob": ".cursor/rules/playbook.styleguide.mdc",
      "category": "documentation",
      "priority": "medium",
      "tags": ["british-english", "tone", "gov-uk", "content-design"],
      "summary": "Standards for documentation language, tone, and style following British English and GOV.UK content design principles.",
      "summary_file": ".cursor/rules/summaries/playbook.styleguide.summary.md",
      "complexity": "low"
    },
    {
      "name": "marine-licensing-journey-tests/project-structure",
      "description": "when organizing files and directories, following project structure standards, creating new components, or understanding the codebase architecture",
      "glob": ".cursor/rules/project-structure.mdc",
      "category": "architecture",
      "priority": "medium",
      "tags": [
        "file-organization",
        "directory-structure",
        "components",
        "architecture"
      ],
      "summary": "Guidelines for organizing project files and directories according to established patterns and conventions.",
      "summary_file": ".cursor/rules/summaries/project-structure.summary.md",
      "complexity": "low"
    },
    {
      "name": "marine-licensing-journey-tests/scenario-testing",
      "description": "when implementing realistic user scenarios, applying Bolton's testing framework, designing authentic user investigations, or creating scenario-enhanced test charters",
      "glob": ".cursor/rules/scenario-testing.mdc",
      "category": "testing-methodology",
      "priority": "high",
      "tags": [
        "scenario-testing",
        "bolton-framework",
        "user-investigations",
        "test-charters"
      ],
      "summary": "Framework for creating realistic, scenario-based tests that simulate authentic user conditions, pressures, and goals.",
      "summary_file": ".cursor/rules/summaries/scenario-testing.summary.md",
      "complexity": "high"
    },
    {
      "name": "marine-licensing-journey-tests/screenplay-pattern",
      "description": "when implementing the screenplay pattern, writing test automation code, creating actors/tasks/interactions, or structuring user-centric test automation",
      "glob": ".cursor/rules/screenplay-pattern.mdc",
      "category": "testing-methodology",
      "priority": "high",
      "tags": [
        "screenplay",
        "test-automation",
        "actors",
        "tasks",
        "interactions"
      ],
      "summary": "Implementation guide for the Screenplay Pattern, structuring test automation around actors, tasks, and interactions for maintainable user-centric tests.",
      "summary_file": ".cursor/rules/summaries/screenplay-pattern.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/test-charters",
      "description": "when creating test charters, planning investigative testing sessions, designing session-based test management, or structuring exploratory testing activities",
      "glob": ".cursor/rules/test-charters.mdc",
      "category": "testing-methodology",
      "priority": "high",
      "tags": [
        "test-charters",
        "exploratory-testing",
        "session-based",
        "investigative-testing"
      ],
      "summary": "Framework for creating effective test charters that guide exploratory testing sessions with clear focus, techniques, and evidence collection.",
      "summary_file": ".cursor/rules/summaries/test-charters.summary.md",
      "complexity": "high"
    },
    {
      "name": "marine-licensing-journey-tests/test-strategy",
      "description": "when considering overall test strategy, test implementation approaches, coverage planning, or exploratory testing sessions",
      "glob": ".cursor/rules/test-strategy.mdc",
      "category": "testing-methodology",
      "priority": "high",
      "tags": ["test-strategy", "coverage", "exploratory-testing", "approach"],
      "summary": "Core principles and approaches for the test strategy, balancing automated and exploratory testing to maximize risk coverage.",
      "summary_file": ".cursor/rules/summaries/test-strategy.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/test-strategy.integration",
      "description": "when planning test strategy, discussing testing approaches, implementing quality engineering practices, or making decisions about test coverage and methodology",
      "glob": ".cursor/rules/test-strategy.integration.mdc",
      "category": "testing-methodology",
      "priority": "high",
      "tags": ["integration", "quality-engineering", "coverage", "methodology"],
      "summary": "Integration of different testing approaches into a cohesive strategy that addresses all quality risks through appropriate methods.",
      "summary_file": ".cursor/rules/summaries/test-strategy.integration.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/url.hyperlink.management",
      "description": "when refactoring documentation with links, updating cross-references, managing markdown links, or ensuring link integrity during code changes",
      "glob": ".cursor/rules/url.hyperlink.management.mdc",
      "category": "documentation",
      "priority": "medium",
      "tags": ["links", "cross-references", "markdown", "link-integrity"],
      "summary": "Practices for maintaining link integrity in documentation during refactoring, ensuring cross-references remain valid across changes.",
      "summary_file": ".cursor/rules/summaries/url.hyperlink.management.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/user.stories.and.test.coverage",
      "description": "when working with user stories, assessing test coverage, linking requirements to tests, planning test implementation, or reviewing coverage gaps",
      "glob": ".cursor/rules/user.stories.and.test.coverage.mdc",
      "category": "testing-methodology",
      "priority": "high",
      "tags": ["user-stories", "test-coverage", "requirements", "gaps"],
      "summary": "Methodology for linking user stories to test coverage, ensuring all requirements are properly tested and identifying gaps.",
      "summary_file": ".cursor/rules/summaries/user.stories.and.test.coverage.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/responsible.ai.use",
      "description": "when working with AI to generate testing content, acknowledging AI limitations in domain knowledge, or ensuring human verification of generated content",
      "glob": ".cursor/rules/responsible.ai.use.mdc",
      "category": "ai-assistance",
      "priority": "high",
      "tags": ["ai", "limitations", "verification", "domain-knowledge"],
      "summary": "Guidelines for responsible use of AI in test content generation, emphasizing human verification and awareness of AI limitations.",
      "summary_file": ".cursor/rules/summaries/responsible.ai.use.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/avoid.over.engineering",
      "description": "when identifying over-engineered solutions, simplifying test code, or ensuring tests remain maintainable and focused",
      "glob": ".cursor/rules/avoid.over.engineering.mdc",
      "category": "development",
      "priority": "high",
      "tags": ["simplicity", "maintainability", "focus", "pragmatism"],
      "summary": "Principles for avoiding unnecessary complexity in test code, preferring simple solutions that address core requirements.",
      "summary_file": ".cursor/rules/summaries/avoid.over.engineering.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/stop.overengineering.and.making.stuff.up",
      "description": "when preventing over-engineered solutions, avoiding unnecessary complexity, or keeping implementations simple and straightforward",
      "glob": ".cursor/rules/stop.overengineering.and.making.stuff.up.mdc",
      "category": "development",
      "priority": "high",
      "tags": ["simplicity", "pragmatism", "complexity-management", "yagni"],
      "summary": "Comprehensive guide to combat over-engineering tendencies, advocating for minimal viable solutions and evidence-based implementations.",
      "summary_file": ".cursor/rules/summaries/stop.overengineering.and.making.stuff.up.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/test.error.handling",
      "description": "when implementing error handling in tests, using proper assertions instead of generic errors, or improving test failure reporting",
      "glob": ".cursor/rules/test.error.handling.mdc",
      "category": "testing-methodology",
      "priority": "high",
      "tags": [
        "error-handling",
        "assertions",
        "failure-reporting",
        "diagnostics"
      ],
      "summary": "Best practices for implementing error handling in tests, focusing on proper assertions and meaningful failure messages.",
      "summary_file": ".cursor/rules/summaries/test.error.handling.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/test.execution.patience",
      "description": "when handling timing issues in tests, implementing proper waits, or ensuring stable test execution",
      "glob": ".cursor/rules/test.execution.patience.mdc",
      "category": "testing-methodology",
      "priority": "medium",
      "tags": ["timing", "waits", "stability", "execution"],
      "summary": "Guidelines for handling timing-related issues in tests through appropriate wait mechanisms and stability enhancements.",
      "summary_file": ".cursor/rules/summaries/test.execution.patience.summary.md",
      "complexity": "low"
    },
    {
      "name": "marine-licensing-journey-tests/defensive.coding.patterns",
      "description": "when implementing defensive coding practices, validating inputs, or making test code more robust",
      "glob": ".cursor/rules/defensive.coding.patterns.mdc",
      "category": "development",
      "priority": "medium",
      "tags": [
        "defensive-coding",
        "validation",
        "robustness",
        "error-prevention"
      ],
      "summary": "Patterns for defensive coding in tests, balancing input validation with maintainability and avoiding over-validation.",
      "summary_file": ".cursor/rules/summaries/defensive.coding.patterns.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/duplicate.action.prevention",
      "description": "when preventing duplicate actions in test automation, ensuring idempotent operations, or handling race conditions",
      "glob": ".cursor/rules/duplicate.action.prevention.mdc",
      "category": "testing-methodology",
      "priority": "medium",
      "tags": ["duplicate-actions", "idempotency", "race-conditions"],
      "summary": "Strategies for preventing duplicate actions in test automation, ensuring operations are properly synchronized and idempotent.",
      "summary_file": ".cursor/rules/summaries/duplicate.action.prevention.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/logical.consistency.validation",
      "description": "when ensuring data models reflect real-world logic, validating business rules, or implementing domain-specific validations",
      "glob": ".cursor/rules/logical.consistency.validation.mdc",
      "category": "domain-knowledge",
      "priority": "high",
      "tags": [
        "data-models",
        "business-rules",
        "domain-validation",
        "consistency"
      ],
      "summary": "Methods for validating logical consistency in data models, ensuring they accurately reflect business rules and domain constraints.",
      "summary_file": ".cursor/rules/summaries/logical.consistency.validation.summary.md",
      "complexity": "high"
    },
    {
      "name": "marine-licensing-journey-tests/environmental.tool.selection",
      "description": "when choosing the right tools for different environments, configuring environment-specific settings, or managing test execution across environments",
      "glob": ".cursor/rules/environmental.tool.selection.mdc",
      "category": "environment",
      "priority": "medium",
      "tags": ["tools", "environments", "configuration", "execution"],
      "summary": "Guidance for selecting appropriate tools based on testing environment requirements and constraints.",
      "summary_file": ".cursor/rules/summaries/environmental.tool.selection.summary.md",
      "complexity": "medium"
    },
    {
      "name": "marine-licensing-journey-tests/documentation.link.integrity",
      "description": "when maintaining links between documentation, ensuring cross-references work, or preventing broken links",
      "glob": ".cursor/rules/documentation.link.integrity.mdc",
      "category": "documentation",
      "priority": "medium",
      "tags": ["links", "cross-references", "integrity", "broken-links"],
      "summary": "Practices for maintaining documentation link integrity, including validation techniques and prevention strategies.",
      "summary_file": ".cursor/rules/summaries/documentation.link.integrity.summary.md",
      "complexity": "medium"
    }
  ],
  "rule_bundles": {
    "new_feature_development": [
      "marine-licensing-journey-tests/code.generation",
      "marine-licensing-journey-tests/screenplay-pattern",
      "marine-licensing-journey-tests/avoid.over.engineering"
    ],
    "documentation_updates": [
      "marine-licensing-journey-tests/documentation.coherence",
      "marine-licensing-journey-tests/documentation.progressive-disclosure",
      "marine-licensing-journey-tests/documentation.link.integrity"
    ],
    "test_creation": [
      "marine-licensing-journey-tests/test-charters",
      "marine-licensing-journey-tests/scenario-testing",
      "marine-licensing-journey-tests/test.error.handling"
    ],
    "code_refactoring": [
      "marine-licensing-journey-tests/playbook.refactoring",
      "marine-licensing-journey-tests/import.dependency.management",
      "marine-licensing-journey-tests/playbook.clean.code"
    ],
    "domain_understanding": [
      "marine-licensing-journey-tests/application.under.test",
      "marine-licensing-journey-tests/personas",
      "marine-licensing-journey-tests/logical.consistency.validation"
    ]
  }
}
