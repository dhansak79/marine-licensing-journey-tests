name: Run Journey Tests on GitHub

inputs:
  marine-licensing-backend:
    required: false
    type: string
  marine-licensing-frontend:
    required: false
    type: string
  branch:
    required: false
    type: string
    default: main

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
      with:
        repository: DEFRA/marine-licensing-journey-tests
        path: ./marine-licensing-journey-tests

    - name: Alternative checkout attempt (only if called from different repo)
      if: github.repository != 'DEFRA/marine-licensing-journey-tests'
      run: |
        rm -rf ./marine-licensing-journey-tests
        git clone https://github.com/DEFRA/marine-licensing-journey-tests.git ./marine-licensing-journey-tests
        cd ./marine-licensing-journey-tests
        git checkout ${{ inputs.branch }} || echo "Using default branch"
      shell: bash

    - name: Extract dependent Pull Requests
      uses: depends-on/depends-on-action@0.15.0
      with:
        token: ${{ github.token }}

    - name: Build marine-licensing-frontend image
      run: |
        echo "=== Building Frontend Image ==="
        echo "Current directory: $(pwd)"

        if [ -d "../../marine-licensing-frontend" ]; then
          echo "✅ Found frontend directory - building PR image"
          cd ../../marine-licensing-frontend
          echo "Branch: $(git branch --show-current) | Commit: $(git log -1 --oneline)"
          docker build -t defradigital/marine-licensing-frontend:pr-build .
          echo "✅ Frontend PR image built successfully"
        else
          echo "ℹ️  No frontend directory found - will use latest image"
          echo "This is normal if no frontend dependency was specified in PR description"
        fi
      shell: bash
      working-directory: ./marine-licensing-journey-tests

    - name: Build marine-licensing-backend image
      run: |
        echo "=== Building Backend Image ==="
        echo "Current directory: $(pwd)"

        if [ -d "../../marine-licensing-backend" ]; then
          echo "✅ Found backend directory - building PR image"
          cd ../../marine-licensing-backend
          echo "Branch: $(git branch --show-current) | Commit: $(git log -1 --oneline)"
          docker build -t defradigital/marine-licensing-backend:pr-build .
          echo "✅ Backend PR image built successfully"
        else
          echo "ℹ️  No backend directory found - will use latest image"
          echo "This is normal if no backend dependency was specified in PR description"
        fi
      shell: bash
      working-directory: ./marine-licensing-journey-tests

    - uses: actions/setup-node@v4
      with:
        node-version: 22
        cache: npm
        cache-dependency-path: ./marine-licensing-journey-tests/package-lock.json

    - name: Setup the tests
      run: npm i
      shell: bash
      working-directory: ./marine-licensing-journey-tests

    - name: Start docker compose
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        # Priority: PR images > specified inputs > latest
        # Check if we built PR images and use them if available
        if docker image inspect defradigital/marine-licensing-frontend:pr-build >/dev/null 2>&1; then
          echo "✅ Using PR-built frontend image (from depends-on)"
          FRONTEND_VERSION="pr-build"
        else
          FRONTEND_VERSION="${{ inputs.marine-licensing-frontend }}"
          echo "ℹ️  Using frontend version: ${FRONTEND_VERSION:-latest} (no PR dependency)"
        fi

        if docker image inspect defradigital/marine-licensing-backend:pr-build >/dev/null 2>&1; then
          echo "✅ Using PR-built backend image (from depends-on)"
          BACKEND_VERSION="pr-build"
        else
          BACKEND_VERSION="${{ inputs.marine-licensing-backend }}"
          echo "ℹ️  Using backend version: ${BACKEND_VERSION:-latest} (no PR dependency)"
        fi

        echo "🐳 Starting containers with:"
        echo "  Frontend: ${FRONTEND_VERSION:-latest}"
        echo "  Backend: ${BACKEND_VERSION:-latest}"

        MARINE_LICENSING_FRONTEND_VERSION=${FRONTEND_VERSION:-latest} \
        MARINE_LICENSING_BACKEND_VERSION=${BACKEND_VERSION:-latest} \
        docker compose -f $(pwd)/compose.common.yml up --wait-timeout 300 -d --quiet-pull

    - name: Check initial service status
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        echo "=== Initial Docker Compose Status ==="
        docker compose -f $(pwd)/compose.common.yml ps
        echo "=== Service Logs (first 20 lines) ==="
        docker compose -f $(pwd)/compose.common.yml logs --tail=20 || echo "No logs available yet"

    - name: Wait for services to be ready
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        echo "Waiting for selenium-chrome to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:4444/wd/hub/status; do sleep 5; done'
        echo "Waiting for backend to be ready..."
        timeout 180 bash -c 'until curl -f http://localhost:3001/health; do sleep 5; done'
        echo "Waiting for Defra ID stub to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:3200/health; do sleep 5; done'
        echo "Waiting for frontend to be ready..."
        timeout 180 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'
        echo "All services are ready!"

    - name: Check service status
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        echo "=== Docker Compose Status ==="
        docker compose -f $(pwd)/compose.common.yml ps
        echo "=== Testing Service Connectivity ==="
        echo "Testing from runner to frontend..."
        curl --fail --silent --connect-timeout 5 http://localhost:3000/health || (echo "❌ Cannot reach frontend from runner!" && exit 1)
        echo "Testing from runner to defra-id-stub..."
        curl --fail --silent --connect-timeout 5 http://localhost:3200/health || (echo "❌ Cannot reach defra-id-stub from runner!" && exit 1)
        echo "Testing defra-id-stub API endpoint..."
        curl -v --connect-timeout 5 http://localhost:3200/cdp-defra-id-stub/API/register -X POST -H "Content-Type: application/json" -d '{"email":"test@example.com","password":"TestPassword123!","firstName":"Test","lastName":"User"}' || echo "Defra ID stub API test completed (may show expected errors)"
        echo "Testing from selenium container to frontend..."
        docker compose -f $(pwd)/compose.common.yml exec -T selenium-chrome curl --fail --silent --connect-timeout 5 http://marine-licensing-frontend:3000/health || (echo "❌ Cannot reach frontend from selenium container!" && exit 1)

    - name: Run the tests
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      env:
        CHROMEDRIVER_URL: localhost
      run: |
        echo "=== Cleaning previous results ==="
        rm -rf allure-results allure-report
        echo "=== Running tests ==="
        npm run test:github

    - name: debug
      if: always()
      working-directory: ./marine-licensing-journey-tests
      run: |
        docker compose -f $(pwd)/compose.common.yml logs > logs.txt
        docker ps
      shell: bash

    - name: Generate Allure report
      if: always()
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        npx allure-commandline@latest generate allure-results --clean --single-file --output allure-report

    - name: Parse test results
      if: always() && github.event_name == 'pull_request'
      id: test-results
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        # Count test results by status
        if [ -d "allure-results" ]; then
          # Count each status type (safer approach)
          PASSED=0
          FAILED=0
          BROKEN=0
          SKIPPED=0
          
          for file in allure-results/*-result.json; do
            if [ -f "$file" ]; then
              if grep -q '"status":"passed"' "$file" 2>/dev/null; then
                PASSED=$((PASSED + 1))
              elif grep -q '"status":"failed"' "$file" 2>/dev/null; then
                FAILED=$((FAILED + 1))
              elif grep -q '"status":"broken"' "$file" 2>/dev/null; then
                BROKEN=$((BROKEN + 1))
              elif grep -q '"status":"skipped"' "$file" 2>/dev/null; then
                SKIPPED=$((SKIPPED + 1))
              fi
            fi
          done
          
          TOTAL=$((PASSED + FAILED + BROKEN + SKIPPED))
          
          # Determine status
          if [ $FAILED -eq 0 ] && [ $BROKEN -eq 0 ] && [ $TOTAL -gt 0 ]; then
            STATUS_EMOJI="✅"
            STATUS_TEXT="All tests passed"
          elif [ $TOTAL -eq 0 ]; then
            STATUS_EMOJI="⚠️"
            STATUS_TEXT="No tests were executed"
          else
            STATUS_EMOJI="❌"
            STATUS_TEXT="Test failures detected"
          fi
          
          # Calculate pass rate
          if [ $TOTAL -gt 0 ]; then
            PASS_RATE=$((PASSED * 100 / TOTAL))
          else
            PASS_RATE=0
          fi
        else
          PASSED=0
          FAILED=0
          BROKEN=0
          SKIPPED=0
          TOTAL=0
          PASS_RATE=0
          STATUS_EMOJI="⚠️"
          STATUS_TEXT="No test results found"
        fi

        # Debug output
        echo "Debug: TOTAL=$TOTAL, PASSED=$PASSED, FAILED=$FAILED, BROKEN=$BROKEN, SKIPPED=$SKIPPED"
        echo "Debug: PASS_RATE=$PASS_RATE, STATUS_EMOJI=$STATUS_EMOJI, STATUS_TEXT=$STATUS_TEXT"

        # Set outputs
        echo "total=$TOTAL" >> $GITHUB_OUTPUT
        echo "passed=$PASSED" >> $GITHUB_OUTPUT
        echo "failed=$FAILED" >> $GITHUB_OUTPUT
        echo "broken=$BROKEN" >> $GITHUB_OUTPUT
        echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT
        echo "pass_rate=$PASS_RATE" >> $GITHUB_OUTPUT
        echo "status_emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT
        echo "status_text=$STATUS_TEXT" >> $GITHUB_OUTPUT

    - name: Find existing comment
      if: always() && github.event_name == 'pull_request'
      uses: peter-evans/find-comment@v3
      id: find-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Marine Licensing Journey Tests

    - name: Create or update PR comment with test results
      if: always() && github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v4
      with:
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        edit-mode: replace
        body: |
          ## Marine Licensing Journey Tests

          ### ${{ steps.test-results.outputs.status_emoji || '⚠️' }} ${{ steps.test-results.outputs.status_text || 'Test Results' }}

          | Metric | Count |
          |:-------|------:|
          | **Total Tests** | ${{ steps.test-results.outputs.total || '0' }} |
          | **Passed** | ${{ steps.test-results.outputs.passed || '0' }} |
          | **Failed** | ${{ steps.test-results.outputs.failed || '0' }} |
          | **Broken** | ${{ steps.test-results.outputs.broken || '0' }} |
          | **Skipped** | ${{ steps.test-results.outputs.skipped || '0' }} |
          | **Pass Rate** | ${{ steps.test-results.outputs.pass_rate || '0' }}% |

          ---

          **[View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**

    - name: Upload Allure report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: ./marine-licensing-journey-tests/allure-report/index.html

    - name: Upload docker compose logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-logs
        path: ./marine-licensing-journey-tests/logs.txt
