name: Run Journey Tests on GitHub

inputs:
  marine-licensing-backend:
    required: false
    type: string
  marine-licensing-frontend:
    required: false
    type: string

runs:
  using: 'composite'
  steps:
    - name: Debug before checkout
      run: |
        echo "=== Before checkout ==="
        echo "Current directory: $(pwd)"
        echo "Listing root directory:"
        ls -la
        echo "Git status:"
        git status || echo "Not a git repo"
      shell: bash

    - uses: actions/checkout@v4
      with:
        repository: DEFRA/marine-licensing-journey-tests
        path: ./marine-licensing-journey-tests
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.ref_name }}

    - name: Alternative checkout attempt
      if: failure()
      run: |
        echo "=== Trying alternative checkout ==="
        rm -rf ./marine-licensing-journey-tests
        git clone https://github.com/DEFRA/marine-licensing-journey-tests.git ./marine-licensing-journey-tests
        cd ./marine-licensing-journey-tests
        git checkout ${{ github.ref_name }} || git checkout main
        ls -la
      shell: bash

    - name: Debug after checkout
      run: |
        echo "=== After checkout ==="
        echo "Current directory: $(pwd)"
        echo "Listing root directory:"
        ls -la
        echo "Checking if marine-licensing-journey-tests directory exists:"
        ls -la ./marine-licensing-journey-tests || echo "Directory not found"
        echo "If directory exists, listing its contents:"
        ls -la ./marine-licensing-journey-tests/ || echo "Cannot list directory contents"
        echo "Checking for compose.common.yml specifically:"
        find . -name "compose.common.yml" -type f || echo "compose.common.yml not found anywhere"
        echo "Checking git status in marine-licensing-journey-tests:"
        cd ./marine-licensing-journey-tests && git status && git log --oneline -5 || echo "Git commands failed"
      shell: bash

    - uses: actions/setup-node@v4
      with:
        node-version: 22
        cache: npm
        cache-dependency-path: ./marine-licensing-journey-tests/package-lock.json

    - name: Setup the tests
      run: npm i
      shell: bash
      working-directory: ./marine-licensing-journey-tests

    - name: Start docker compose
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        echo "Current working directory: $(pwd)"
        echo "Listing files in current directory:"
        ls -la
        echo "Checking if compose.common.yml exists:"
        ls -la compose.common.yml || echo "compose.common.yml not found"
        echo "Starting docker compose..."
        MARINE_LICENSING_FRONTEND_VERSION=${{inputs.marine-licensing-frontend}} \
        MARINE_LICENSING_BACKEND_VERSION=${{inputs.marine-licensing-backend}} \
        docker compose -f $(pwd)/compose.common.yml up --wait-timeout 300 -d --quiet-pull

    - name: Check initial service status
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        echo "Current working directory: $(pwd)"
        echo "=== Initial Docker Compose Status ==="
        docker compose -f $(pwd)/compose.common.yml ps
        echo "=== Service Logs (first 20 lines) ==="
        docker compose -f $(pwd)/compose.common.yml logs --tail=20 || echo "No logs available yet"

    - name: Wait for services to be ready
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        echo "Waiting for selenium-chrome to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:4444/wd/hub/status; do sleep 5; done'
        echo "Waiting for backend to be ready..."
        timeout 180 bash -c 'until curl -f http://localhost:3001/health; do sleep 5; done'
        echo "Waiting for Defra ID stub to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:3200/health; do sleep 5; done'
        echo "Waiting for frontend to be ready..."
        timeout 180 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'
        echo "All services are ready!"

    - name: Check service status
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        echo "=== Docker Compose Status ==="
        docker compose -f $(pwd)/compose.common.yml ps
        echo "=== Testing Service Connectivity ==="
        echo "Testing from runner to frontend..."
        curl --fail --silent --connect-timeout 5 http://localhost:3000/health || (echo "❌ Cannot reach frontend from runner!" && exit 1)
        echo "Testing from runner to defra-id-stub..."
        curl --fail --silent --connect-timeout 5 http://localhost:3200/health || (echo "❌ Cannot reach defra-id-stub from runner!" && exit 1)
        echo "Testing defra-id-stub API endpoint..."
        curl -v --connect-timeout 5 http://localhost:3200/cdp-defra-id-stub/API/register -X POST -H "Content-Type: application/json" -d '{"email":"test@example.com","password":"TestPassword123!","firstName":"Test","lastName":"User"}' || echo "Defra ID stub API test completed (may show expected errors)"
        echo "Testing from selenium container to frontend..."
        docker compose -f $(pwd)/compose.common.yml exec -T selenium-chrome curl --fail --silent --connect-timeout 5 http://marine-licensing-frontend:3000/health || (echo "❌ Cannot reach frontend from selenium container!" && exit 1)

    - name: Run the tests
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      env:
        CHROMEDRIVER_URL: localhost
        # Use local infrastructure endpoints
      run: |
        echo "=== Cleaning previous results ==="
        rm -rf allure-results allure-report
        echo "=== Running tests ==="
        npm run test:github
        echo "=== Checking test results ==="
        ls -la allure-results/ || echo "No allure-results directory found"

    - name: debug
      if: always()
      working-directory: ./marine-licensing-journey-tests
      run: |
        docker compose -f $(pwd)/compose.common.yml logs > logs.txt
        docker ps
      shell: bash

    - name: Generate Allure report
      if: always()
      shell: bash
      working-directory: ./marine-licensing-journey-tests
      run: |
        npm run report:github

    - name: Upload Allure report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: ./marine-licensing-journey-tests/allure-report/index.html # Single HTML file (not folder structure)

    - name: Upload docker compose logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-compose-logs
        path: ./marine-licensing-journey-tests/logs.txt
